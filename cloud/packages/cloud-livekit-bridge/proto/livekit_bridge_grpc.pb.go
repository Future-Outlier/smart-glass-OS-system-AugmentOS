// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/livekit_bridge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveKitBridge_StreamAudio_FullMethodName = "/mentra.livekit.bridge.LiveKitBridge/StreamAudio"
	LiveKitBridge_JoinRoom_FullMethodName    = "/mentra.livekit.bridge.LiveKitBridge/JoinRoom"
	LiveKitBridge_LeaveRoom_FullMethodName   = "/mentra.livekit.bridge.LiveKitBridge/LeaveRoom"
	LiveKitBridge_PlayAudio_FullMethodName   = "/mentra.livekit.bridge.LiveKitBridge/PlayAudio"
	LiveKitBridge_StopAudio_FullMethodName   = "/mentra.livekit.bridge.LiveKitBridge/StopAudio"
	LiveKitBridge_HealthCheck_FullMethodName = "/mentra.livekit.bridge.LiveKitBridge/HealthCheck"
)

// LiveKitBridgeClient is the client API for LiveKitBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # LiveKit Bridge Service
//
// Provides gRPC interface between TypeScript cloud and Go LiveKit bridge.
// Handles bidirectional audio streaming and room management.
type LiveKitBridgeClient interface {
	// Bidirectional audio streaming
	//
	// Client can send audio TO LiveKit room and receive audio FROM room
	// in a single multiplexed stream. Audio arrives bursty from LiveKit
	// (network/buffering), TypeScript handles jitter buffering for Soniox.
	StreamAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, AudioChunk], error)
	// Room lifecycle management
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*LeaveRoomResponse, error)
	// Server-side audio playback (MP3/WAV → LiveKit track)
	//
	// Returns streaming events for progress tracking.
	// Used by session.audio.playAudio() and session.audio.speak()
	PlayAudio(ctx context.Context, in *PlayAudioRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayAudioEvent], error)
	StopAudio(ctx context.Context, in *StopAudioRequest, opts ...grpc.CallOption) (*StopAudioResponse, error)
	// Health check (for monitoring/load balancing)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type liveKitBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveKitBridgeClient(cc grpc.ClientConnInterface) LiveKitBridgeClient {
	return &liveKitBridgeClient{cc}
}

func (c *liveKitBridgeClient) StreamAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, AudioChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LiveKitBridge_ServiceDesc.Streams[0], LiveKitBridge_StreamAudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioChunk, AudioChunk]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LiveKitBridge_StreamAudioClient = grpc.BidiStreamingClient[AudioChunk, AudioChunk]

func (c *liveKitBridgeClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, LiveKitBridge_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveKitBridgeClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*LeaveRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRoomResponse)
	err := c.cc.Invoke(ctx, LiveKitBridge_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveKitBridgeClient) PlayAudio(ctx context.Context, in *PlayAudioRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayAudioEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LiveKitBridge_ServiceDesc.Streams[1], LiveKitBridge_PlayAudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlayAudioRequest, PlayAudioEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LiveKitBridge_PlayAudioClient = grpc.ServerStreamingClient[PlayAudioEvent]

func (c *liveKitBridgeClient) StopAudio(ctx context.Context, in *StopAudioRequest, opts ...grpc.CallOption) (*StopAudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAudioResponse)
	err := c.cc.Invoke(ctx, LiveKitBridge_StopAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveKitBridgeClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LiveKitBridge_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveKitBridgeServer is the server API for LiveKitBridge service.
// All implementations must embed UnimplementedLiveKitBridgeServer
// for forward compatibility.
//
// # LiveKit Bridge Service
//
// Provides gRPC interface between TypeScript cloud and Go LiveKit bridge.
// Handles bidirectional audio streaming and room management.
type LiveKitBridgeServer interface {
	// Bidirectional audio streaming
	//
	// Client can send audio TO LiveKit room and receive audio FROM room
	// in a single multiplexed stream. Audio arrives bursty from LiveKit
	// (network/buffering), TypeScript handles jitter buffering for Soniox.
	StreamAudio(grpc.BidiStreamingServer[AudioChunk, AudioChunk]) error
	// Room lifecycle management
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	LeaveRoom(context.Context, *LeaveRoomRequest) (*LeaveRoomResponse, error)
	// Server-side audio playback (MP3/WAV → LiveKit track)
	//
	// Returns streaming events for progress tracking.
	// Used by session.audio.playAudio() and session.audio.speak()
	PlayAudio(*PlayAudioRequest, grpc.ServerStreamingServer[PlayAudioEvent]) error
	StopAudio(context.Context, *StopAudioRequest) (*StopAudioResponse, error)
	// Health check (for monitoring/load balancing)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLiveKitBridgeServer()
}

// UnimplementedLiveKitBridgeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveKitBridgeServer struct{}

func (UnimplementedLiveKitBridgeServer) StreamAudio(grpc.BidiStreamingServer[AudioChunk, AudioChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedLiveKitBridgeServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLiveKitBridgeServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*LeaveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedLiveKitBridgeServer) PlayAudio(*PlayAudioRequest, grpc.ServerStreamingServer[PlayAudioEvent]) error {
	return status.Errorf(codes.Unimplemented, "method PlayAudio not implemented")
}
func (UnimplementedLiveKitBridgeServer) StopAudio(context.Context, *StopAudioRequest) (*StopAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAudio not implemented")
}
func (UnimplementedLiveKitBridgeServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLiveKitBridgeServer) mustEmbedUnimplementedLiveKitBridgeServer() {}
func (UnimplementedLiveKitBridgeServer) testEmbeddedByValue()                       {}

// UnsafeLiveKitBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveKitBridgeServer will
// result in compilation errors.
type UnsafeLiveKitBridgeServer interface {
	mustEmbedUnimplementedLiveKitBridgeServer()
}

func RegisterLiveKitBridgeServer(s grpc.ServiceRegistrar, srv LiveKitBridgeServer) {
	// If the following call pancis, it indicates UnimplementedLiveKitBridgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveKitBridge_ServiceDesc, srv)
}

func _LiveKitBridge_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LiveKitBridgeServer).StreamAudio(&grpc.GenericServerStream[AudioChunk, AudioChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LiveKitBridge_StreamAudioServer = grpc.BidiStreamingServer[AudioChunk, AudioChunk]

func _LiveKitBridge_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveKitBridgeServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveKitBridge_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveKitBridgeServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveKitBridge_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveKitBridgeServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveKitBridge_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveKitBridgeServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveKitBridge_PlayAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayAudioRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveKitBridgeServer).PlayAudio(m, &grpc.GenericServerStream[PlayAudioRequest, PlayAudioEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LiveKitBridge_PlayAudioServer = grpc.ServerStreamingServer[PlayAudioEvent]

func _LiveKitBridge_StopAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveKitBridgeServer).StopAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveKitBridge_StopAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveKitBridgeServer).StopAudio(ctx, req.(*StopAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveKitBridge_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveKitBridgeServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveKitBridge_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveKitBridgeServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveKitBridge_ServiceDesc is the grpc.ServiceDesc for LiveKitBridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveKitBridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mentra.livekit.bridge.LiveKitBridge",
	HandlerType: (*LiveKitBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRoom",
			Handler:    _LiveKitBridge_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _LiveKitBridge_LeaveRoom_Handler,
		},
		{
			MethodName: "StopAudio",
			Handler:    _LiveKitBridge_StopAudio_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LiveKitBridge_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _LiveKitBridge_StreamAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PlayAudio",
			Handler:       _LiveKitBridge_PlayAudio_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/livekit_bridge.proto",
}
