// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: proto/livekit_bridge.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event type
type PlayAudioEvent_EventType int32

const (
	PlayAudioEvent_STARTED   PlayAudioEvent_EventType = 0 // Playback started
	PlayAudioEvent_PROGRESS  PlayAudioEvent_EventType = 1 // Playback progress update
	PlayAudioEvent_COMPLETED PlayAudioEvent_EventType = 2 // Playback finished successfully
	PlayAudioEvent_FAILED    PlayAudioEvent_EventType = 3 // Playback failed with error
)

// Enum value maps for PlayAudioEvent_EventType.
var (
	PlayAudioEvent_EventType_name = map[int32]string{
		0: "STARTED",
		1: "PROGRESS",
		2: "COMPLETED",
		3: "FAILED",
	}
	PlayAudioEvent_EventType_value = map[string]int32{
		"STARTED":   0,
		"PROGRESS":  1,
		"COMPLETED": 2,
		"FAILED":    3,
	}
)

func (x PlayAudioEvent_EventType) Enum() *PlayAudioEvent_EventType {
	p := new(PlayAudioEvent_EventType)
	*p = x
	return p
}

func (x PlayAudioEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayAudioEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_livekit_bridge_proto_enumTypes[0].Descriptor()
}

func (PlayAudioEvent_EventType) Type() protoreflect.EnumType {
	return &file_proto_livekit_bridge_proto_enumTypes[0]
}

func (x PlayAudioEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayAudioEvent_EventType.Descriptor instead.
func (PlayAudioEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{6, 0}
}

// Service status
type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN         HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING         HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING     HealthCheckResponse_ServingStatus = 2
	HealthCheckResponse_SERVICE_UNKNOWN HealthCheckResponse_ServingStatus = 3
)

// Enum value maps for HealthCheckResponse_ServingStatus.
var (
	HealthCheckResponse_ServingStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	HealthCheckResponse_ServingStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x HealthCheckResponse_ServingStatus) Enum() *HealthCheckResponse_ServingStatus {
	p := new(HealthCheckResponse_ServingStatus)
	*p = x
	return p
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_ServingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_livekit_bridge_proto_enumTypes[1].Descriptor()
}

func (HealthCheckResponse_ServingStatus) Type() protoreflect.EnumType {
	return &file_proto_livekit_bridge_proto_enumTypes[1]
}

func (x HealthCheckResponse_ServingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_ServingStatus.Descriptor instead.
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{10, 0}
}

// Audio chunk (PCM16 mono)
//
// Represents raw audio data flowing between TypeScript and Go bridge.
// Audio may arrive bursty from LiveKit (e.g., 4 chunks in 5ms, then gap).
type AudioChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Raw PCM16 LE data (16-bit signed little-endian)
	PcmData []byte `protobuf:"bytes,1,opt,name=pcm_data,json=pcmData,proto3" json:"pcm_data,omitempty"`
	// Sample rate in Hz (typically 16000)
	SampleRate int32 `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Number of channels (1 = mono, 2 = stereo)
	Channels int32 `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty"`
	// Timestamp in milliseconds since epoch
	TimestampMs int64 `protobuf:"varint,4,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// User ID for routing (required for first message in stream)
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Track name (optional, defaults to "speaker")
	// Track ID for routing audio to specific LiveKit tracks (optional)
	// 0: speaker (default audio playback)
	// 1: app_audio (app-specific audio)
	// 2: tts (text-to-speech audio)
	// >2: custom app tracks
	TrackId       int32 `protobuf:"varint,6,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *AudioChunk) GetPcmData() []byte {
	if x != nil {
		return x.PcmData
	}
	return nil
}

func (x *AudioChunk) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioChunk) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *AudioChunk) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *AudioChunk) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AudioChunk) GetTrackId() int32 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

// Join LiveKit room request
type JoinRoomRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User ID (also used as room participant identity)
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// LiveKit room name (typically same as user_id)
	RoomName string `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// LiveKit JWT token (minted by TypeScript with appropriate grants)
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// LiveKit server URL (wss://...)
	LivekitUrl string `protobuf:"bytes,4,opt,name=livekit_url,json=livekitUrl,proto3" json:"livekit_url,omitempty"`
	// Optional: Identity to subscribe to (typically user_id for self-audio)
	// If set, bridge will subscribe to this participant's DataChannel packets
	TargetIdentity string `protobuf:"bytes,5,opt,name=target_identity,json=targetIdentity,proto3" json:"target_identity,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *JoinRoomRequest) Reset() {
	*x = JoinRoomRequest{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomRequest) ProtoMessage() {}

func (x *JoinRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomRequest.ProtoReflect.Descriptor instead.
func (*JoinRoomRequest) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *JoinRoomRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinRoomRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *JoinRoomRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinRoomRequest) GetLivekitUrl() string {
	if x != nil {
		return x.LivekitUrl
	}
	return ""
}

func (x *JoinRoomRequest) GetTargetIdentity() string {
	if x != nil {
		return x.TargetIdentity
	}
	return ""
}

// Join room response
type JoinRoomResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether join succeeded
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if failed
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Participant ID assigned by LiveKit
	ParticipantId string `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	// Number of participants in room (including self)
	ParticipantCount int32 `protobuf:"varint,4,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	// Room metadata (optional)
	Metadata      map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRoomResponse) Reset() {
	*x = JoinRoomResponse{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomResponse) ProtoMessage() {}

func (x *JoinRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomResponse.ProtoReflect.Descriptor instead.
func (*JoinRoomResponse) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *JoinRoomResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinRoomResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *JoinRoomResponse) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *JoinRoomResponse) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

func (x *JoinRoomResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Leave room request
type LeaveRoomRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User ID of room to leave
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Optional reason for leaving
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveRoomRequest) Reset() {
	*x = LeaveRoomRequest{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRoomRequest) ProtoMessage() {}

func (x *LeaveRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRoomRequest.ProtoReflect.Descriptor instead.
func (*LeaveRoomRequest) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *LeaveRoomRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaveRoomRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Leave room response
type LeaveRoomResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveRoomResponse) Reset() {
	*x = LeaveRoomResponse{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRoomResponse) ProtoMessage() {}

func (x *LeaveRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRoomResponse.ProtoReflect.Descriptor instead.
func (*LeaveRoomResponse) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *LeaveRoomResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LeaveRoomResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Play audio from URL request
//
// Downloads audio file (MP3/WAV), decodes, resamples to 16kHz,
// and publishes to LiveKit room as audio track.
type PlayAudioRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique request ID (for tracking events)
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// URL to audio file (HTTP/HTTPS)
	// Supports: MP3 (audio/mpeg), WAV (audio/wav, audio/x-wav)
	AudioUrl string `protobuf:"bytes,2,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
	// Volume level (0.0 = mute, 1.0 = full volume, >1.0 = boost)
	Volume float32 `protobuf:"fixed32,3,opt,name=volume,proto3" json:"volume,omitempty"`
	// Whether to stop other audio playback before starting
	StopOther bool `protobuf:"varint,4,opt,name=stop_other,json=stopOther,proto3" json:"stop_other,omitempty"`
	// User ID (for routing to correct room session)
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Track ID (optional, defaults to 0 = "speaker")
	TrackId       int32 `protobuf:"varint,6,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayAudioRequest) Reset() {
	*x = PlayAudioRequest{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAudioRequest) ProtoMessage() {}

func (x *PlayAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAudioRequest.ProtoReflect.Descriptor instead.
func (*PlayAudioRequest) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *PlayAudioRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PlayAudioRequest) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

func (x *PlayAudioRequest) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PlayAudioRequest) GetStopOther() bool {
	if x != nil {
		return x.StopOther
	}
	return false
}

func (x *PlayAudioRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayAudioRequest) GetTrackId() int32 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

// Play audio event (streaming response)
//
// Emitted during audio playback lifecycle.
type PlayAudioEvent struct {
	state protoimpl.MessageState   `protogen:"open.v1"`
	Type  PlayAudioEvent_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=mentra.livekit.bridge.PlayAudioEvent_EventType" json:"type,omitempty"`
	// Request ID (matches PlayAudioRequest.request_id)
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Total duration in milliseconds (if known)
	DurationMs int64 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// Current playback position in milliseconds
	PositionMs int64 `protobuf:"varint,4,opt,name=position_ms,json=positionMs,proto3" json:"position_ms,omitempty"`
	// Error message (if type = FAILED)
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// Additional metadata
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayAudioEvent) Reset() {
	*x = PlayAudioEvent{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayAudioEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayAudioEvent) ProtoMessage() {}

func (x *PlayAudioEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayAudioEvent.ProtoReflect.Descriptor instead.
func (*PlayAudioEvent) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *PlayAudioEvent) GetType() PlayAudioEvent_EventType {
	if x != nil {
		return x.Type
	}
	return PlayAudioEvent_STARTED
}

func (x *PlayAudioEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PlayAudioEvent) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *PlayAudioEvent) GetPositionMs() int64 {
	if x != nil {
		return x.PositionMs
	}
	return 0
}

func (x *PlayAudioEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PlayAudioEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Stop audio playback request
type StopAudioRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User ID (for routing)
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Optional: Specific request ID to stop (if not set, stops current playback)
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Reason for stopping (for debugging/logging)
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Track ID to stop (optional, defaults to 0 = "speaker")
	TrackId       int32 `protobuf:"varint,4,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopAudioRequest) Reset() {
	*x = StopAudioRequest{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAudioRequest) ProtoMessage() {}

func (x *StopAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAudioRequest.ProtoReflect.Descriptor instead.
func (*StopAudioRequest) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *StopAudioRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StopAudioRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StopAudioRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StopAudioRequest) GetTrackId() int32 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

// Stop audio response
type StopAudioResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Request ID that was stopped (if any)
	StoppedRequestId string `protobuf:"bytes,3,opt,name=stopped_request_id,json=stoppedRequestId,proto3" json:"stopped_request_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StopAudioResponse) Reset() {
	*x = StopAudioResponse{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAudioResponse) ProtoMessage() {}

func (x *StopAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAudioResponse.ProtoReflect.Descriptor instead.
func (*StopAudioResponse) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *StopAudioResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StopAudioResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *StopAudioResponse) GetStoppedRequestId() string {
	if x != nil {
		return x.StoppedRequestId
	}
	return ""
}

// Health check request
type HealthCheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional service name to check (empty = check all)
	Service       string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// Health check response
type HealthCheckResponse struct {
	state  protoimpl.MessageState            `protogen:"open.v1"`
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=mentra.livekit.bridge.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	// Total active sessions
	ActiveSessions int32 `protobuf:"varint,2,opt,name=active_sessions,json=activeSessions,proto3" json:"active_sessions,omitempty"`
	// Total active streams
	ActiveStreams int32 `protobuf:"varint,3,opt,name=active_streams,json=activeStreams,proto3" json:"active_streams,omitempty"`
	// Uptime in seconds
	UptimeSeconds int64 `protobuf:"varint,4,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// Additional diagnostics
	Metadata      map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{10}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_UNKNOWN
}

func (x *HealthCheckResponse) GetActiveSessions() int32 {
	if x != nil {
		return x.ActiveSessions
	}
	return 0
}

func (x *HealthCheckResponse) GetActiveStreams() int32 {
	if x != nil {
		return x.ActiveStreams
	}
	return 0
}

func (x *HealthCheckResponse) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *HealthCheckResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Statistics message (for future monitoring/debugging)
type SessionStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UserId              string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AudioFramesSent     int64                  `protobuf:"varint,2,opt,name=audio_frames_sent,json=audioFramesSent,proto3" json:"audio_frames_sent,omitempty"`
	AudioFramesReceived int64                  `protobuf:"varint,3,opt,name=audio_frames_received,json=audioFramesReceived,proto3" json:"audio_frames_received,omitempty"`
	BytesSent           int64                  `protobuf:"varint,4,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived       int64                  `protobuf:"varint,5,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	SessionDurationMs   int64                  `protobuf:"varint,6,opt,name=session_duration_ms,json=sessionDurationMs,proto3" json:"session_duration_ms,omitempty"`
	RoomName            string                 `protobuf:"bytes,7,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	ParticipantCount    int32                  `protobuf:"varint,8,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SessionStats) Reset() {
	*x = SessionStats{}
	mi := &file_proto_livekit_bridge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStats) ProtoMessage() {}

func (x *SessionStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_livekit_bridge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStats.ProtoReflect.Descriptor instead.
func (*SessionStats) Descriptor() ([]byte, []int) {
	return file_proto_livekit_bridge_proto_rawDescGZIP(), []int{11}
}

func (x *SessionStats) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SessionStats) GetAudioFramesSent() int64 {
	if x != nil {
		return x.AudioFramesSent
	}
	return 0
}

func (x *SessionStats) GetAudioFramesReceived() int64 {
	if x != nil {
		return x.AudioFramesReceived
	}
	return 0
}

func (x *SessionStats) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *SessionStats) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *SessionStats) GetSessionDurationMs() int64 {
	if x != nil {
		return x.SessionDurationMs
	}
	return 0
}

func (x *SessionStats) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *SessionStats) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

var File_proto_livekit_bridge_proto protoreflect.FileDescriptor

const file_proto_livekit_bridge_proto_rawDesc = "" +
	"\n" +
	"\x1aproto/livekit_bridge.proto\x12\x15mentra.livekit.bridge\"\xbb\x01\n" +
	"\n" +
	"AudioChunk\x12\x19\n" +
	"\bpcm_data\x18\x01 \x01(\fR\apcmData\x12\x1f\n" +
	"\vsample_rate\x18\x02 \x01(\x05R\n" +
	"sampleRate\x12\x1a\n" +
	"\bchannels\x18\x03 \x01(\x05R\bchannels\x12!\n" +
	"\ftimestamp_ms\x18\x04 \x01(\x03R\vtimestampMs\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x19\n" +
	"\btrack_id\x18\x06 \x01(\x05R\atrackId\"\xa7\x01\n" +
	"\x0fJoinRoomRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\troom_name\x18\x02 \x01(\tR\broomName\x12\x14\n" +
	"\x05token\x18\x03 \x01(\tR\x05token\x12\x1f\n" +
	"\vlivekit_url\x18\x04 \x01(\tR\n" +
	"livekitUrl\x12'\n" +
	"\x0ftarget_identity\x18\x05 \x01(\tR\x0etargetIdentity\"\xa6\x02\n" +
	"\x10JoinRoomResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12%\n" +
	"\x0eparticipant_id\x18\x03 \x01(\tR\rparticipantId\x12+\n" +
	"\x11participant_count\x18\x04 \x01(\x05R\x10participantCount\x12Q\n" +
	"\bmetadata\x18\x05 \x03(\v25.mentra.livekit.bridge.JoinRoomResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"C\n" +
	"\x10LeaveRoomRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"C\n" +
	"\x11LeaveRoomResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\xb9\x01\n" +
	"\x10PlayAudioRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1b\n" +
	"\taudio_url\x18\x02 \x01(\tR\baudioUrl\x12\x16\n" +
	"\x06volume\x18\x03 \x01(\x02R\x06volume\x12\x1d\n" +
	"\n" +
	"stop_other\x18\x04 \x01(\bR\tstopOther\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x19\n" +
	"\btrack_id\x18\x06 \x01(\x05R\atrackId\"\x9d\x03\n" +
	"\x0ePlayAudioEvent\x12C\n" +
	"\x04type\x18\x01 \x01(\x0e2/.mentra.livekit.bridge.PlayAudioEvent.EventTypeR\x04type\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x12\x1f\n" +
	"\vduration_ms\x18\x03 \x01(\x03R\n" +
	"durationMs\x12\x1f\n" +
	"\vposition_ms\x18\x04 \x01(\x03R\n" +
	"positionMs\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x12O\n" +
	"\bmetadata\x18\x06 \x03(\v23.mentra.livekit.bridge.PlayAudioEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"A\n" +
	"\tEventType\x12\v\n" +
	"\aSTARTED\x10\x00\x12\f\n" +
	"\bPROGRESS\x10\x01\x12\r\n" +
	"\tCOMPLETED\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\"}\n" +
	"\x10StopAudioRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\x12\x19\n" +
	"\btrack_id\x18\x04 \x01(\x05R\atrackId\"q\n" +
	"\x11StopAudioResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12,\n" +
	"\x12stopped_request_id\x18\x03 \x01(\tR\x10stoppedRequestId\".\n" +
	"\x12HealthCheckRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\"\xc2\x03\n" +
	"\x13HealthCheckResponse\x12P\n" +
	"\x06status\x18\x01 \x01(\x0e28.mentra.livekit.bridge.HealthCheckResponse.ServingStatusR\x06status\x12'\n" +
	"\x0factive_sessions\x18\x02 \x01(\x05R\x0eactiveSessions\x12%\n" +
	"\x0eactive_streams\x18\x03 \x01(\x05R\ractiveStreams\x12%\n" +
	"\x0euptime_seconds\x18\x04 \x01(\x03R\ruptimeSeconds\x12T\n" +
	"\bmetadata\x18\x05 \x03(\v28.mentra.livekit.bridge.HealthCheckResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"O\n" +
	"\rServingStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aSERVING\x10\x01\x12\x0f\n" +
	"\vNOT_SERVING\x10\x02\x12\x13\n" +
	"\x0fSERVICE_UNKNOWN\x10\x03\"\xc7\x02\n" +
	"\fSessionStats\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12*\n" +
	"\x11audio_frames_sent\x18\x02 \x01(\x03R\x0faudioFramesSent\x122\n" +
	"\x15audio_frames_received\x18\x03 \x01(\x03R\x13audioFramesReceived\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x04 \x01(\x03R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\x05 \x01(\x03R\rbytesReceived\x12.\n" +
	"\x13session_duration_ms\x18\x06 \x01(\x03R\x11sessionDurationMs\x12\x1b\n" +
	"\troom_name\x18\a \x01(\tR\broomName\x12+\n" +
	"\x11participant_count\x18\b \x01(\x05R\x10participantCount2\xca\x04\n" +
	"\rLiveKitBridge\x12W\n" +
	"\vStreamAudio\x12!.mentra.livekit.bridge.AudioChunk\x1a!.mentra.livekit.bridge.AudioChunk(\x010\x01\x12[\n" +
	"\bJoinRoom\x12&.mentra.livekit.bridge.JoinRoomRequest\x1a'.mentra.livekit.bridge.JoinRoomResponse\x12^\n" +
	"\tLeaveRoom\x12'.mentra.livekit.bridge.LeaveRoomRequest\x1a(.mentra.livekit.bridge.LeaveRoomResponse\x12]\n" +
	"\tPlayAudio\x12'.mentra.livekit.bridge.PlayAudioRequest\x1a%.mentra.livekit.bridge.PlayAudioEvent0\x01\x12^\n" +
	"\tStopAudio\x12'.mentra.livekit.bridge.StopAudioRequest\x1a(.mentra.livekit.bridge.StopAudioResponse\x12d\n" +
	"\vHealthCheck\x12).mentra.livekit.bridge.HealthCheckRequest\x1a*.mentra.livekit.bridge.HealthCheckResponseB(Z&github.com/mentra/livekit-bridge/protob\x06proto3"

var (
	file_proto_livekit_bridge_proto_rawDescOnce sync.Once
	file_proto_livekit_bridge_proto_rawDescData []byte
)

func file_proto_livekit_bridge_proto_rawDescGZIP() []byte {
	file_proto_livekit_bridge_proto_rawDescOnce.Do(func() {
		file_proto_livekit_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_livekit_bridge_proto_rawDesc), len(file_proto_livekit_bridge_proto_rawDesc)))
	})
	return file_proto_livekit_bridge_proto_rawDescData
}

var file_proto_livekit_bridge_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_livekit_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_livekit_bridge_proto_goTypes = []any{
	(PlayAudioEvent_EventType)(0),          // 0: mentra.livekit.bridge.PlayAudioEvent.EventType
	(HealthCheckResponse_ServingStatus)(0), // 1: mentra.livekit.bridge.HealthCheckResponse.ServingStatus
	(*AudioChunk)(nil),                     // 2: mentra.livekit.bridge.AudioChunk
	(*JoinRoomRequest)(nil),                // 3: mentra.livekit.bridge.JoinRoomRequest
	(*JoinRoomResponse)(nil),               // 4: mentra.livekit.bridge.JoinRoomResponse
	(*LeaveRoomRequest)(nil),               // 5: mentra.livekit.bridge.LeaveRoomRequest
	(*LeaveRoomResponse)(nil),              // 6: mentra.livekit.bridge.LeaveRoomResponse
	(*PlayAudioRequest)(nil),               // 7: mentra.livekit.bridge.PlayAudioRequest
	(*PlayAudioEvent)(nil),                 // 8: mentra.livekit.bridge.PlayAudioEvent
	(*StopAudioRequest)(nil),               // 9: mentra.livekit.bridge.StopAudioRequest
	(*StopAudioResponse)(nil),              // 10: mentra.livekit.bridge.StopAudioResponse
	(*HealthCheckRequest)(nil),             // 11: mentra.livekit.bridge.HealthCheckRequest
	(*HealthCheckResponse)(nil),            // 12: mentra.livekit.bridge.HealthCheckResponse
	(*SessionStats)(nil),                   // 13: mentra.livekit.bridge.SessionStats
	nil,                                    // 14: mentra.livekit.bridge.JoinRoomResponse.MetadataEntry
	nil,                                    // 15: mentra.livekit.bridge.PlayAudioEvent.MetadataEntry
	nil,                                    // 16: mentra.livekit.bridge.HealthCheckResponse.MetadataEntry
}
var file_proto_livekit_bridge_proto_depIdxs = []int32{
	14, // 0: mentra.livekit.bridge.JoinRoomResponse.metadata:type_name -> mentra.livekit.bridge.JoinRoomResponse.MetadataEntry
	0,  // 1: mentra.livekit.bridge.PlayAudioEvent.type:type_name -> mentra.livekit.bridge.PlayAudioEvent.EventType
	15, // 2: mentra.livekit.bridge.PlayAudioEvent.metadata:type_name -> mentra.livekit.bridge.PlayAudioEvent.MetadataEntry
	1,  // 3: mentra.livekit.bridge.HealthCheckResponse.status:type_name -> mentra.livekit.bridge.HealthCheckResponse.ServingStatus
	16, // 4: mentra.livekit.bridge.HealthCheckResponse.metadata:type_name -> mentra.livekit.bridge.HealthCheckResponse.MetadataEntry
	2,  // 5: mentra.livekit.bridge.LiveKitBridge.StreamAudio:input_type -> mentra.livekit.bridge.AudioChunk
	3,  // 6: mentra.livekit.bridge.LiveKitBridge.JoinRoom:input_type -> mentra.livekit.bridge.JoinRoomRequest
	5,  // 7: mentra.livekit.bridge.LiveKitBridge.LeaveRoom:input_type -> mentra.livekit.bridge.LeaveRoomRequest
	7,  // 8: mentra.livekit.bridge.LiveKitBridge.PlayAudio:input_type -> mentra.livekit.bridge.PlayAudioRequest
	9,  // 9: mentra.livekit.bridge.LiveKitBridge.StopAudio:input_type -> mentra.livekit.bridge.StopAudioRequest
	11, // 10: mentra.livekit.bridge.LiveKitBridge.HealthCheck:input_type -> mentra.livekit.bridge.HealthCheckRequest
	2,  // 11: mentra.livekit.bridge.LiveKitBridge.StreamAudio:output_type -> mentra.livekit.bridge.AudioChunk
	4,  // 12: mentra.livekit.bridge.LiveKitBridge.JoinRoom:output_type -> mentra.livekit.bridge.JoinRoomResponse
	6,  // 13: mentra.livekit.bridge.LiveKitBridge.LeaveRoom:output_type -> mentra.livekit.bridge.LeaveRoomResponse
	8,  // 14: mentra.livekit.bridge.LiveKitBridge.PlayAudio:output_type -> mentra.livekit.bridge.PlayAudioEvent
	10, // 15: mentra.livekit.bridge.LiveKitBridge.StopAudio:output_type -> mentra.livekit.bridge.StopAudioResponse
	12, // 16: mentra.livekit.bridge.LiveKitBridge.HealthCheck:output_type -> mentra.livekit.bridge.HealthCheckResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_livekit_bridge_proto_init() }
func file_proto_livekit_bridge_proto_init() {
	if File_proto_livekit_bridge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_livekit_bridge_proto_rawDesc), len(file_proto_livekit_bridge_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_livekit_bridge_proto_goTypes,
		DependencyIndexes: file_proto_livekit_bridge_proto_depIdxs,
		EnumInfos:         file_proto_livekit_bridge_proto_enumTypes,
		MessageInfos:      file_proto_livekit_bridge_proto_msgTypes,
	}.Build()
	File_proto_livekit_bridge_proto = out.File
	file_proto_livekit_bridge_proto_goTypes = nil
	file_proto_livekit_bridge_proto_depIdxs = nil
}
